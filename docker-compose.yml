version: "3.8"

services:
  client:
    container_name: front-vite
    build: ./client
    profiles: ["client", "dev", "web"]
    command: yarn dev
    volumes:
      - ./client/src:/app/src
    ports:
      - 8000:8000
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    tty: true
    env_file:
      - ./client.env

  server:
    container_name: server
    build: ./server
    profiles: ["back", "dev", "mobile", "web"]
    command: yarn dev
    volumes:
      - ./server/src:/app/src
      - tempFiles:/app/tempUploads
      - finalFiles:/app/finalUploads
    ports:
      - 4000:4000
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./server.env

  upload:
    container_name: Upload
    build: ./Upload
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    command: yarn dev
    ports:
      - 5005:5005
    profiles: ["back", "dev", "mobile", "web"]
    volumes:
      - tempFiles:/app/tempUploads
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./upload.env

  db:
    container_name: db
    image: postgres
    profiles: ["back", "dev", "mobile", "web"]
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wildTransfer
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d wildTransfer -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  adminer:
    container_name: adminer
    profiles: ["back", "dev", "mobile", "web"]
    image: adminer
    depends_on:
      - db
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMINER_DESIGN: mvt

volumes:
  postgres:
  tempFiles:
  finalFiles:
